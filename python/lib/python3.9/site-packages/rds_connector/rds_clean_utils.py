"""
This Python script encompasses utility functions specifically designed to peform cleaning operations on a query results pandas DataFrame
in the rds_processor.py file.  

Functions:
      
    - clean_empty_none(field, df, removed): 
      Cleans rows with empty or None values from the specified field in the DataFrame. 
      
    - convert_dates(field, df, output_format=None): 
      Converts string dates in the specified field to datetime objects in the DataFrame. 
      
    - convert_integer(field, df): 
      Converts string numbers in the specified field to integers in the DataFrame. 
      
    - update_field_names(self, table_fields, new_fields): 
      Updates column names in the DataFrame based on user-provided lists of current and new field names.

      
Classes:
    - RDS: 
      Handles database queries, data schema validation, and data cleaning.

      
Dependencies:
    - pandas
    - datetime

Created by: Charles Ross
Contact: charles.ross@mbakerintl.com
Last updated by: Charles Ross on 11/19/2024
"""


################    IMPORT PACKAGES    ######################

import pandas as pd




################    DATA CLEANING FUNCTIONS    ######################

#----------------------------------------------------------------

def clean_empty_none(field, df, removed):

    """
    Cleans rows with empty or None values from the specified field in the DataFrame and maintains a log of the removed rows.

    Parameters:
    -----------
    field : str
        The name of the field to be checked for empty or None values.
    df : pd.DataFrame
        The DataFrame to be cleaned.
    removed : pd.DataFrame
        A DataFrame to store rows that are removed during the cleaning process.

    Returns:
    --------
    tuple
        A tuple containing the cleaned DataFrame and the DataFrame of removed rows.

    Raises:
    -------
    Exception
        If the specified field is not in the DataFrame or if there is an error adding rows to the cleaned DataFrame.

    Explanation:
    ------------
    This function iterates through the DataFrame, checking for empty or None values in the specified field. 
    Rows with empty or None values are added to the `removed` DataFrame, while other rows are added to the `cleaned_df` DataFrame. 
    If the specified field is not found in the DataFrame, an exception is raised. The function ensures that the DataFrame is cleaned 
    by removing rows with empty or None values in the specified field and returns the cleaned DataFrame along with the removed rows.

    Note:
    -----
    Any discrepancy in the field names or errors during the row addition process will raise an exception.
    """
    
    #Create Empty DataFrame
    cleaned_df = pd.DataFrame()

    #Check if Field in Dataframe
    if field not in df.columns:
        raise Exception(f"Error: {field} Not In DataFrame")


    #Itterate Through DataFrame and Check for Empty Values
    for index, row in df.iterrows():
        
        #Create Add Check for Row
        add_check = True

        #Check for None or Empty Strings in Row Fields
        if row[field] == None or row[field] == '':
            add_check = False

        #If Add Check Still True, Add to Cleaned DataFrame
        try:
            if add_check == True:
                cleaned_df = pd.concat([cleaned_df, pd.DataFrame(row).T])

            elif add_check == False:
                removed = pd.concat([removed, pd.DataFrame(row).T])

        except Exception as e:
            raise Exception(f'Error: Failed to Add Row to Cleaned DataFrame {e}')

        
    return cleaned_df, removed




#----------------------------------------------------------------

def convert_dates(field, df, output_format = None):

    """
    Converts string dates in the specified field to datetime objects in the DataFrame.

    Parameters:
    -----------
    field : str
        The name of the field containing date strings to be converted.
    df : pd.DataFrame
        The DataFrame containing the field to be converted.
    output_format : str, optional
        The format to which the datetime objects should be converted. If not provided, the default datetime format is used.

    Returns:
    --------
    pd.DataFrame
        The DataFrame with the converted date field.

    Raises:
    -------
    Exception
        If the specified field is not in the DataFrame or if there is an error converting the field to datetime.

    Explanation:
    ------------
    This function checks if the specified field is present in the DataFrame. It then converts the string dates in the field to datetime objects 
    using `pandas.to_datetime()`. If an output format is provided, the datetime objects are converted to the specified string format. 
    If there is any error during the conversion process, an exception is raised. The function ensures that the date strings in the specified field 
    are correctly converted to datetime objects or formatted strings and returns the updated DataFrame.

    Note:
    -----
    Any discrepancy in the field names or errors during the conversion process will raise an exception.
    """

    #Check if Field in DataFrame
    if field not in df.columns:
        raise Exception(f"Error: {field} Not In DataFrame")

    
    try:
        df[field] = pd.to_datetime(df[field])
        
        #Convert to String Format if output_format passed
        if output_format != None:
            df[field] = df[field].dt.strftime(output_format)
            
        return df
    
    except Exception as e:
       raise Exception(f"Error: Could not convert {field} to datetime:  Traceback{e}")
    



#----------------------------------------------------------------

def convert_integer(field, df):

    """
    Converts string numbers in the specified field to integers in the DataFrame.

    Parameters:
    -----------
    field : str
        The name of the field containing string numbers to be converted.
    df : pd.DataFrame
        The DataFrame containing the field to be converted.

    Returns:
    --------
    pd.DataFrame
        The DataFrame with the converted integer field.

    Raises:
    -------
    Exception
        If the specified field is not in the DataFrame or if there is an error converting the field to integers.

    Explanation:
    ------------
    This function checks if the specified field is present in the DataFrame. It then converts the string numbers in the field to integers 
    using `pandas.to_numeric()` with error coercion. If there is any error during the conversion process, an exception is raised. 
    The function ensures that the string numbers in the specified field are correctly converted to numeric values and returns the updated DataFrame.

    Note:
    -----
    Any discrepancy in the field names or errors during the conversion process will raise an exception.
    """

    #Check if Field in DataFrame
    if field not in df.columns:
        raise Exception(f"Error: {field} Not In DataFrame")
    
    try:
        df[field] = pd.to_numeric(df[field], errors='coerce')
        return df
    
    except Exception as e:
        raise Exception(f"Error: Could not convert {field} to integer:  Traceback{e}")




#----------------------------------------------------------------

def update_field_names(self, table_fields, new_fields):

        """
        Update column names in the dataframe.  User provides list of fields that need to be updated in the
        table and a list of fields names that they need to be updated to.  The fields must match in each list.
        
        Parameters:
        -----------
        table_fields : list
            Current column names.
        new_fields : list
            New column names.
        
        Raises:
        -------
        Exception
            If dataframe is empty or rename fails.
        """
        
        #Create Dictionary for Fields Update
        field_dict = dict(zip(table_fields, new_fields))

        #Update Fields
        for table_field, new_field in field_dict.items():

            if self.df.empty == False :
            
                try:
                    #Update the Column Name
                    self.df.rename(columns={table_field: new_field}, inplace=True)

                except Exception as e:
                    raise Exception(f"Failure to Convert {table_field} to {new_field}")
    
            else:
                raise Exception("Error: Cannot Rename Columns of Empty Dataframe")